# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      USERNAME1: ${USERNAME1}
      USERNAME2: ${USERNAME2}
      USERPASSWORD: ${USERPASSWORD}
      EMAIL_RECIPIENT: ${EMAIL_RECIPIENT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASEPASSWORD: ${DATABASEPASSWORD}
      DATABASE_HOST: oracledb
      DATABASE_PORT: 1521
    ports:
      - 3000:3000
    depends_on:
      oracledb:
        condition: service_healthy

  oracledb:
    image: gvenzl/oracle-xe
    restart: always
    environment:
      ORACLE_PASSWORD: ${DATABASEPASSWORD}
      ORACLE_DATABASE: XEPDB1
      ORACLE_USER: ${DATABASE_USER}
    ports:
      - 1521:1521
    volumes:
      - oracle-data:/opt/oracle/oradata
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'SELECT 1 FROM dual;' | sqlplus -s ${DATABASE_USER}/${DATABASEPASSWORD}@//localhost:1521/XEPDB1 | grep -q 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 2m

volumes:
  oracle-data:



const oracledb = require('oracledb');
require('dotenv').config();

async function setupOracleDatabase(){
    const connection = await connectOracle();
    try {
        await connection.execute(`
          CREATE TABLE ENERGY_CONSUMPTION (
            ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            ADDRESS VARCHAR2(255),
            ANNUALAVERAGECONSUMPTION NUMBER,
            BILATERALCONSUMERGROUP VARCHAR2(255),
            CITYID NUMBER,
            CITYNAME VARCHAR2(255),
            CONNECTIONPOSITION VARCHAR2(255),
            CONSUMPTINPOINTEIC VARCHAR2(255),
            CONSUMPTIONPOINTID NUMBER,
            CONTRACTPOWER NUMBER,
            CUSTOMERNO VARCHAR2(255),
            DEMANDDIRECTION VARCHAR2(255),
            DEMANDID NUMBER,
            DEMANDSTATUS VARCHAR2(255),
            DEMANDTYPE VARCHAR2(255),
            DESCRIPTION VARCHAR2(255),
            DISTRICTID NUMBER,
            DISTRICTNAME VARCHAR2(255),
            LASTRESORTCONSUMERGROUP VARCHAR2(255),
            MAINTARIFFGROUP VARCHAR2(255),
            METERID NUMBER,
            NEWORGANIZATION VARCHAR2(255),
            OLDORGANIZATION VARCHAR2(255),
            OWNERORGANIZATION VARCHAR2(255),
            PERIODDATE VARCHAR2(255),
            PROFILESUBSCRIPTIONGROUP VARCHAR2(255),
            READINGORGANIZATION VARCHAR2(255),
            READINGTYPE VARCHAR2(255),
            SENDTOLASTSUPPLIER NUMBER,
            SUBSTATIONREGION VARCHAR2(255),
            SUBSTATIONREGIONID NUMBER,
            TARIFFCLASSTYPE VARCHAR2(255),
            TITLE VARCHAR2(255),
            UNIQUECODE VARCHAR2(255),
            USAGETYPE VARCHAR2(255),
            KULLANICI VARCHAR2(255),
            CREATEDTIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            CONSTRAINT user_unique UNIQUE (UNIQUECODE, PERIODDATE, KULLANICI)
          )
        `);
        console.log('Oracle Database connection established and schema setup completed.');
    } catch (err) {
        if (err.errorNum === 955) { // ORA-00955: name is already used by an existing object
            console.log('Table already exists, skipping creation.');
        } else {
            console.error('Error setting up Oracle Database:', err);
        }
    }
    //const result = await connection.execute(`SELECT table_name FROM user_tables`);
    //console.log('Tables:', result.rows);
    return connection;
}


async function connectOracle() {
  try {
    const connection = await oracledb.getConnection({
      user: process.env.DATABASE_USER, // replace with your Oracle username
      password: process.env.DATABASEPASSWORD, // replace with your Oracle password
      connectString: 'localhost:1521/XEPDB1' // replace XEPDB1 if your DB service name is different
    });

    console.log('Connected to OracleDB!');
    return connection;
  } catch (err) {
    console.error('OracleDB connection error:', err);
  }
}
module.exports = {
  setupOracleDatabase,
  connectOracle
};
